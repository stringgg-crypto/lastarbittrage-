import numpy as np
import requests
import logging
import aiohttp
import asyncio
import time
from telegram import Bot
import ccxt.pro as ccxtpro

# Telegram –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
TELEGRAM_BOT_TOKEN = '7196660803:AAGg8-LGgDqrCLbYSfo8xrII008mRV7GFZY'
CHANNEL_ID = '-1002174617061'

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
MIN_SPREAD = 0.9  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
MAX_SPREAD = 8.0  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
MIN_TRADE_AMOUNT = 500  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π –æ–±—ä–µ–º –∏ —Å—É–º–º–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏
MIN_VOLUME = 300000  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å—É—Ç–æ—á–Ω—ã–π –æ–±—ä–µ–º
SPREAD_THRESHOLD = 0.01  # –ü–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–ø—Ä–µ–¥–∞
PRICE_RANGE_PERCENT = 0.30  # –î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω—ã –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏
MIN_PROFIT = 0.00  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∏–≥–Ω–∞–ª–∞
LIQUIDITY_CHECK_TIMES = 1  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≤–µ—Ä–æ–∫ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏
LIQUIDITY_CHECK_SLEEP = 0.3  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏
TASK_BATCH_SIZE = 15  # –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —Å–∫–æ–ª—å–∫–æ —Å–∏–≥–Ω–∞–ª–æ–≤ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –∑–∞ –æ–¥–∏–Ω –±–ª–æ–∫


# –°–ø–∏—Å–æ–∫ URL Flask-—Å–µ—Ä–≤–µ—Ä–æ–≤
FLASK_SERVER_URLS = [
    "http://localhost:8001/prices",  # Binance —Å–µ—Ä–≤–µ—Ä
    "http://localhost:8002/prices",  # Bybit —Å–µ—Ä–≤–µ—Ä
    "http://localhost:8000/prices",  # MEXC —Å–µ—Ä–≤–µ—Ä
    "http://localhost:8004/prices",  # HTX —Å–µ—Ä–≤–µ—Ä
    "http://localhost:8005/prices"  # KuCoin —Å–µ—Ä–≤–µ—Ä
]

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(message)s', encoding='utf-8')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è –±–∏—Ä–∂
exchanges = {
    "binance": ccxtpro.binance(),
    "bybit": ccxtpro.bybit(),
    "mexc": ccxtpro.mexc(),
    "kucoin": ccxtpro.kucoin(),
    "htx": ccxtpro.huobi()
}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–±—É–∫–æ–≤
order_books = {
    "binance": None,
    "bybit": None,
    "mexc": None,
    "kucoin": None,
    "htx": None
}


async def process_opportunity(opp):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏, –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏—è —Å–ø—Ä–µ–¥–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è –æ–¥–Ω–æ–π –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏"""
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏
    has_liquidity, dynamic_trade_amount = await check_liquidity_custom(
        opp['buy_exchange'], opp['sell_exchange'], opp['symbol'], PRICE_RANGE_PERCENT, None, None
    )

    # –ï—Å–ª–∏ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞
    if has_liquidity:
        opp['dynamic_trade_amount'] = dynamic_trade_amount

        # –ê–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏—è —Å–ø—Ä–µ–¥–∞
        updated_opportunity = await update_single_spread(opp, SPREAD_THRESHOLD, MIN_SPREAD)

        # –ï—Å–ª–∏ —Å–ø—Ä–µ–¥ –ø–æ—Å–ª–µ –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–µ–Ω, –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–∞
        if updated_opportunity:
            bot = create_bot(TELEGRAM_BOT_TOKEN)
            await send_signal(bot, [updated_opportunity])
            logging.info(
                f"–°–∏–≥–Ω–∞–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è {updated_opportunity['symbol']} —Å {updated_opportunity['buy_exchange']} –Ω–∞ {updated_opportunity['sell_exchange']}."
            )
        else:
            logging.info(f"–°–ø—Ä–µ–¥ –¥–ª—è {opp['symbol']} –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–µ–Ω –ø–æ—Å–ª–µ –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏–∏, —Å–∏–≥–Ω–∞–ª –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è.")
    else:
        logging.info(
            f"–õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞ –¥–ª—è {opp['symbol']} –º–µ–∂–¥—É {opp['buy_exchange']} –∏ {opp['sell_exchange']}.")


# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Bot –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ Request
def create_bot(token):
    return Bot(token=token)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
async def send_signal(bot, opportunities):
    logging.info("–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ Telegram.")
    for opp in opportunities:
        await send_single_signal(bot, opp)
        await asyncio.sleep(0.5)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –≤ –ø–æ–ª—Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏


async def send_single_signal(bot, opp):
    buy_url = generate_exchange_url(opp['buy_exchange'], opp['symbol'])
    sell_url = generate_exchange_url(opp['sell_exchange'], opp['symbol'])
    buy_price = opp.get('buy_price', 0)
    sell_price = opp.get('sell_price', 0)
    dynamic_trade_amount = opp.get('dynamic_trade_amount', MIN_TRADE_AMOUNT)

    if buy_price == 0 or sell_price == 0:
        logging.warning(
            f"–ü—Ä–æ–ø—É—Å–∫ —Å–∏–≥–Ω–∞–ª–∞ —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏ –¥–ª—è {opp['symbol']} –Ω–∞ {opp['buy_exchange']} –∏ {opp['sell_exchange']}")
        return

    withdraw_fee_usd = float(opp.get('withdraw_fee', 0)) * buy_price
    profit_amount_usdt = ((dynamic_trade_amount / buy_price) * sell_price) - dynamic_trade_amount - withdraw_fee_usd

    if profit_amount_usdt <= MIN_PROFIT:
        logging.info(
            f"–ü—Ä–∏–±—ã–ª—å {profit_amount_usdt:.2f} USDT –Ω–∏–∂–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π {MIN_PROFIT:.2f} USDT –¥–ª—è {opp['symbol']}, —Å–∏–≥–Ω–∞–ª –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è.")
        return

    spread_display = opp['spread_display']

    message = (
        f"üíµ –ü–æ–∫—É–ø–∫–∞ <b>{opp['symbol']}</b>\n"
        f"–û–±—ä—ë–º: {dynamic_trade_amount} USDT -> {(dynamic_trade_amount / buy_price):.2f} {opp['symbol']}\n"
        f"–¶–µ–Ω–∞: {buy_price:.8f} USDT\n"
        f"–ë–∏—Ä–∂–∞: <a href='{buy_url}'>{opp['buy_exchange'].upper()}</a>\n\n"
        f"üí∞ –ü—Ä–æ–¥–∞–∂–∞\n"
        f"–û–±—ä—ë–º: {(dynamic_trade_amount / buy_price):.2f} {opp['symbol']} -> {((dynamic_trade_amount / buy_price) * sell_price):.2f} USDT\n"
        f"–¶–µ–Ω–∞: {sell_price:.8f} USDT\n"
        f"–ë–∏—Ä–∂–∞: <a href='{sell_url}'>{opp['sell_exchange'].upper()}</a>\n\n"
        f"üìà –ü—Ä–æ—Ñ–∏—Ç: {profit_amount_usdt:.3f} USDT\n"
        f"–°–ø—Ä–µ–¥: {spread_display:.2f}%\n\n"
        f"üí∏ –ö–æ–º–∏—Å—Å–∏—è –∑–∞ –≤—ã–≤–æ–¥: {withdraw_fee_usd:.3f} USDT\n"
        f"üîó –°–µ—Ç—å: {opp['network']}\n"
    )

    try:
        await bot.send_message(chat_id=CHANNEL_ID, text=message, parse_mode='HTML', disable_web_page_preview=True)
        logging.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è {opp['symbol']} —Å {opp['buy_exchange']} –Ω–∞ {opp['sell_exchange']}.")
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª: {CHANNEL_ID}, –æ—à–∏–±–∫–∞: {e}")


# –§—É–Ω–∫—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –≤–µ–±-—Å–æ–∫–µ—Ç–∞–º –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–±—É–∫–æ–≤
async def connect_selected_websockets(symbol, buy_exchange, sell_exchange):
    """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –∫ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –≤–µ–±-—Å–æ–∫–µ—Ç–∞–º –±–∏—Ä–∂ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–±—É–∫–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    formatted_symbol_buy = format_symbol(buy_exchange, symbol)
    formatted_symbol_sell = format_symbol(sell_exchange, symbol)

    buy_order_book, sell_order_book = await asyncio.gather(
        fetch_order_book(buy_exchange, formatted_symbol_buy),
        fetch_order_book(sell_exchange, formatted_symbol_sell)
    )

    return buy_order_book, sell_order_book


async def fetch_order_book(exchange_name, formatted_symbol):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–±—É–∫–∞ —á–µ—Ä–µ–∑ WebSocket"""
    exchange = exchanges[exchange_name]
    try:
        order_book = await exchange.watch_order_book(formatted_symbol)
        if order_book is None or 'bids' not in order_book or 'asks' not in order_book:
            logging.error(f"–û—Ä–¥–µ—Ä–±—É–∫ –ø—É—Å—Ç –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è {formatted_symbol} –Ω–∞ {exchange_name}")
            return {'bids': [], 'asks': []}
        else:
            logging.info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ä–¥–µ—Ä–±—É–∫–∞ –¥–ª—è {formatted_symbol} –Ω–∞ {exchange_name}")
            return order_book
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å {exchange_name}: {e}")
        return {'bids': [], 'asks': []}


def format_symbol(exchange, symbol):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–∏–º–≤–æ–ª—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –±–∏—Ä–∂–∏ –Ω–∞ —ç—Ç–∞–ø–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏."""
    if exchange in ["kucoin", "htx"]:
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Å–∏–º–≤–æ–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç—Å—è —Å –æ–¥–Ω–∏–º —Å–ª—ç—à–µ–º
        return symbol.replace('USDT', '/USDT').replace('//', '/')  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    else:
        # –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –±–∏—Ä–∂ —Å–∏–º–≤–æ–ª—ã –æ—Å—Ç–∞—é—Ç—Å—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'BTCUSDT'
        return symbol.replace('/', '').replace('_', '')

async def fetch_current_price_and_range(exchange_name, symbol, price_range_percent, is_buy):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã —á–µ—Ä–µ–∑ WebSocket –∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞.
    """
    # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏–º–≤–æ–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç "BASE/QUOTE" (–Ω–∞–ø—Ä–∏–º–µ—Ä, "BTC/USDT")
    if symbol[-4:] == "USDT":
        symbol = f"{symbol[:-4]}/USDT"  # –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Å–∏–º–≤–æ–ª–∞ –∏ –¥–æ–±–∞–≤–ª—è–µ–º '/USDT'
    else:
        logging.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å–∏–º–≤–æ–ª: {symbol}. –°–∏–º–≤–æ–ª –¥–æ–ª–∂–µ–Ω –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å—Å—è –Ω–∞ 'USDT'.")
        return None, None, None

    exchange = exchanges[exchange_name]  # –í—ã–±–æ—Ä –Ω—É–∂–Ω–æ–π –±–∏—Ä–∂–∏ –∏–∑ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞

    try:
        if exchange_name == "mexc":
            # –î–ª—è MEXC –∏—Å–ø–æ–ª—å–∑—É–µ–º K-line (—Å–≤–µ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ) –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã
            ohlcv = await exchange.watch_ohlcv(symbol, timeframe='1m')
            current_price = ohlcv[-1][4]  # –¶–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–≤–µ—á–∏
        else:
            # –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –±–∏—Ä–∂ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∏–∫–µ—Ä
            ticker = await exchange.watch_ticker(symbol)
            current_price = ticker['last']

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
        if current_price is None:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É –¥–ª—è {symbol} –Ω–∞ {exchange_name}.")
            return None, None, None

        logging.info(f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –¥–ª—è {symbol} –Ω–∞ {exchange_name}: {current_price:.8f} USDT")

        # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ —Å–¥–µ–ª–∫–∏ (–ø–æ–∫—É–ø–∫–∞ –∏–ª–∏ –ø—Ä–æ–¥–∞–∂–∞)
        if is_buy:
            lower_bound = current_price
            upper_bound = current_price * (1 + price_range_percent / 100)
        else:
            lower_bound = current_price * (1 - price_range_percent / 100)
            upper_bound = current_price

        logging.info(
            f"–î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω—ã –¥–ª—è {exchange_name} ({'–ø–æ–∫—É–ø–∫–∞' if is_buy else '–ø—Ä–æ–¥–∞–∂–∞'}): {lower_bound:.8f} - {upper_bound:.8f} USDT")

        return current_price, lower_bound, upper_bound

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å {exchange_name}: {e}")
        return None, None, None


async def fetch_liquidity(exchange, symbol, current_price, liquidity_amount, is_buy, price_range_percent, order_book):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ –Ω–∞ –±–∏—Ä–∂–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–±—É–∫–∞."""
    lower_bound, upper_bound = (
        (current_price * (1 - price_range_percent / 100), current_price) if not is_buy
        else (current_price, current_price * (1 + price_range_percent / 100))
    )

    total_volume = 0
    highest_price = lowest_price = 0

    if not is_buy:
        bids = [bid for bid in order_book['bids'] if lower_bound <= float(bid[0]) <= upper_bound]
        total_volume = sum(float(bid[1]) * float(bid[0]) for bid in bids)
        highest_price = float(bids[0][0]) if bids else 0.0
        result = total_volume >= liquidity_amount
    else:
        asks = [ask for ask in order_book['asks'] if lower_bound <= float(ask[0]) <= upper_bound]
        total_volume = sum(float(ask[1]) * float(ask[0]) for ask in asks)
        lowest_price = float(asks[0][0]) if asks else 0.0
        result = total_volume >= liquidity_amount

    return result, total_volume

# –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏
async def check_liquidity_custom(buy_exchange, sell_exchange, symbol, price_range_percent, buy_order_book, sell_order_book):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –±–∏—Ä–∂–∞—Ö —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –æ—Ä–¥–µ—Ä–±—É–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—Ä–æ—Å–∞ —Ü–µ–Ω—ã –∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤."""
    available_buy_volume_list = []
    available_sell_volume_list = []

    for _ in range(LIQUIDITY_CHECK_TIMES):
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã –∏ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∏ –ø—Ä–æ–¥–∞–∂–∏
        buy_price, buy_lower, buy_upper = await fetch_current_price_and_range(buy_exchange, symbol, price_range_percent, is_buy=True)
        sell_price, sell_lower, sell_upper = await fetch_current_price_and_range(sell_exchange, symbol, price_range_percent, is_buy=False)

        if not all([buy_price, sell_price]):
            logging.warning(f"–¶–µ–Ω—ã –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã –¥–ª—è {symbol} –Ω–∞ {buy_exchange} –∏–ª–∏ {sell_exchange}. –ü—Ä–æ–ø—É—Å–∫ —Ç–µ–∫—É—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏.")
            continue

        # –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ—Ä–¥–µ—Ä–±—É–∫–∏ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã –∏ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
        buy_order_book = await fetch_order_book(buy_exchange, symbol)
        sell_order_book = await fetch_order_book(sell_exchange, symbol)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ –Ω–∞ –ø–æ–∫—É–ø–∫—É
        if buy_order_book:
            buy_liquidity, buy_volume = await fetch_liquidity(
                buy_exchange, symbol, buy_price, MIN_TRADE_AMOUNT, is_buy=True,
                price_range_percent=price_range_percent, order_book=buy_order_book
            )
            if buy_liquidity:
                available_buy_volume_list.append(buy_volume)
            log_liquidity_check(
                symbol, buy_lower, buy_upper, buy_volume, buy_order_book['asks'][0][0] if buy_order_book['asks'] else 0,
                buy_order_book['asks'][-1][0] if buy_order_book['asks'] else 0, buy_exchange,
                buy_liquidity, MIN_TRADE_AMOUNT, 'buy', buy_price
            )

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É
        if sell_order_book:
            sell_liquidity, sell_volume = await fetch_liquidity(
                sell_exchange, symbol, sell_price, MIN_TRADE_AMOUNT, is_buy=False,
                price_range_percent=price_range_percent, order_book=sell_order_book
            )
            if sell_liquidity:
                available_sell_volume_list.append(sell_volume)
            log_liquidity_check(
                symbol, sell_lower, sell_upper, sell_volume, sell_order_book['bids'][0][0] if sell_order_book['bids'] else 0,
                sell_order_book['bids'][-1][0] if sell_order_book['bids'] else 0, sell_exchange,
                sell_liquidity, MIN_TRADE_AMOUNT, 'sell', sell_price
            )

    # –†–∞—Å—á—ë—Ç –º–µ–¥–∏–∞–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ—Å–ª–µ –≤—Å–µ—Ö —Ü–∏–∫–ª–æ–≤
    median_buy_volume = np.median(available_buy_volume_list) if available_buy_volume_list else 0
    median_sell_volume = np.median(available_sell_volume_list) if available_sell_volume_list else 0

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –æ–±—ä—ë–º–æ–≤ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏
    buy_liquidity = median_buy_volume >= MIN_TRADE_AMOUNT
    sell_liquidity = median_sell_volume >= MIN_TRADE_AMOUNT
    has_liquidity = buy_liquidity and sell_liquidity

    # –†–∞—Å—Å—á—ë—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –æ–±—ä—ë–º–∞ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏
    dynamic_trade_volume = min(median_buy_volume, median_sell_volume) * 0.9 if has_liquidity else MIN_TRADE_AMOUNT
    logging.info(f"–õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞ –¥–ª—è {symbol} –Ω–∞ {buy_exchange} –∏ {sell_exchange}. –†–µ–∑—É–ª—å—Ç–∞—Ç: {'–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ' if has_liquidity else '–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ'}")
    return has_liquidity, dynamic_trade_volume



def log_liquidity_check(symbol, lower_bound, upper_bound, median_volume, highest_price, lowest_price, exchange, result,
                        liquidity_amount, order_type, current_price):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏"""
    logging.info(f"Symbol: {symbol} ({exchange})")
    logging.info(f"Current Price: {current_price:.8f} USDT")
    logging.info(f"Price Range: {lower_bound:.8f} - {upper_bound:.8f} USDT")
    logging.info(f"Highest {order_type}: {highest_price:.8f} USDT")
    logging.info(f"Lowest {order_type}: {lowest_price:.8f} USDT")
    logging.info(
        f"Total Medium {order_type} Volume (USDT): {median_volume:.2f} (Threshold: {liquidity_amount:.2f} USDT)")

    if result:
        logging.info(f"–õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å –¥–ª—è {symbol} –Ω–∞ {exchange} –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω–∞.")
    else:
        logging.info(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å –¥–ª—è {symbol} –Ω–∞ {exchange}. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞.")


def normalize_symbol(exchange, symbol):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–∏–º–≤–æ–ª—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –±–∏—Ä–∂–∏."""
    if exchange in ["kucoin", "htx"]:
        # –î–ª—è KuCoin –∏ HTX —Å–∏–º–≤–æ–ª—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'BASE/QUOTE', –±–µ–∑ –ª–∏—à–Ω–∏—Ö –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–π
        return symbol.replace('_', '/').replace('USDT', '/USDT').replace('//', '/').upper()
    elif exchange in ["binance", "bybit", "mexc"]:
        # –î–ª—è Binance, Bybit –∏ MEXC —Å–∏–º–≤–æ–ª—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –±–µ–∑ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–π –∏–ª–∏ —Å–ª—ç—à–µ–π
        return symbol.replace('/', '').replace('_', '').upper()
    return symbol.upper()




# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è URL –¥–ª—è –±–∏—Ä–∂–∏
def generate_exchange_url(exchange, symbol):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ URL –¥–ª—è –±–∏—Ä–∂ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–∏–º–≤–æ–ª–∞."""

    # –î–ª—è Binance –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    if exchange == "binance":
        return f"https://www.binance.com/en/trade/{symbol.replace('/', '')}?type=spot"

    # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è Bybit
    elif exchange == "bybit":
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–∏–º–≤–æ–ª—ã –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å '/' –º–µ–∂–¥—É –±–∞–∑–æ–≤–æ–π –≤–∞–ª—é—Ç–æ–π –∏ –∫–æ—Ç–∏—Ä—É–µ–º–æ–π
        return f"https://www.bybit.com/en/trade/spot/{symbol.replace('_', '/').replace('/', '/')}"

    # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è HTX (—Ä–∞–Ω–µ–µ Huobi)
    elif exchange == "htx":
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–∏–º–≤–æ–ª—ã –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å '_' –º–µ–∂–¥—É –±–∞–∑–æ–≤–æ–π –≤–∞–ª—é—Ç–æ–π –∏ –∫–æ—Ç–∏—Ä—É–µ–º–æ–π –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ
        base_symbol = symbol.replace('/', '_').lower()
        return f"https://www.htx.com/ru-ru/trade/{base_symbol}?type=spot"

    # –î–ª—è MEXC –∏ KuCoin –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—Ä–µ–∂–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç—ã
    elif exchange == "mexc":
        base_symbol = symbol.replace('/', '_')
        return f"https://www.mexc.com/ru-RU/exchange/{base_symbol}?_from=search_spot_trade"

    elif exchange == "kucoin":
        base_symbol = symbol.replace('USDT', '-USDT') if 'USDT' in symbol else symbol
        return f"https://www.kucoin.com/trade/{base_symbol}"

    # –ï—Å–ª–∏ –±–∏—Ä–∂–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞
    else:
        return "#"


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∫ —Å–µ—Ä–≤–µ—Ä—É —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
async def fetch_data_with_retries(url, params=None, retries=3, delay=3, timeout=10):
    """–ó–∞–ø—Ä–æ—Å –∫ —Å–µ—Ä–≤–µ—Ä—É —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏."""
    for attempt in range(1, retries + 1):
        try:
            timeout_setting = aiohttp.ClientTimeout(total=timeout)
            async with aiohttp.ClientSession(timeout=timeout_setting) as session:
                async with session.get(url=url, params=params) as response:
                    status_code = response.status
                    data = await response.json()

            if status_code == 200:
                logging.info(f"–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã —Å {url}.")
                return data
            else:
                logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å {url}: —Å—Ç–∞—Ç—É—Å {status_code}")
        except Exception as e:
            logging.error(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt}/{retries}: –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ {url}: {e}")
            if attempt < retries:
                logging.info(f"–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ {delay} —Å–µ–∫—É–Ω–¥...")
                await asyncio.sleep(delay)
            else:
                logging.error(f"–ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è {url}.")
                return None

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö Flask —Å–µ—Ä–≤–µ—Ä–æ–≤ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
async def get_data_from_servers():
    logging.info("–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å Flask —Å–µ—Ä–≤–µ—Ä–æ–≤.")
    tasks = []

    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–æ 3
    semaphore = asyncio.Semaphore(3)

    async def fetch_data_with_semaphore(url):
        async with semaphore:
            return await fetch_data_with_retries(url, retries=3, delay=3, timeout=10)

    for url in FLASK_SERVER_URLS:
        tasks.append(fetch_data_with_semaphore(url))

    responses = await asyncio.gather(*tasks, return_exceptions=True)

    combined_data = {}
    for response in responses:
        if isinstance(response, Exception):
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –¥–∞–Ω–Ω—ã—Ö: {response}")
        elif response:
            combined_data.update(response)

    return combined_data


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∫ —Å–µ—Ä–≤–µ—Ä—É
async def fetch_data(url, params=None):
    try:
        timeout = aiohttp.ClientTimeout(total=10)
        async with aiohttp.ClientSession(timeout=timeout) as session:
            async with session.get(url=url, timeout=5, params=params) as response:
                status_code = response.status
                data = await response.json()
        if status_code == 200:
            logging.info(f"–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã —Å {url}.")
            return data
        else:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å {url}: {status_code}")
            return None
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ {url}: {e}")
        return None

def normalize_symbol_for_comparison(symbol):
    """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å–∏–º–≤–æ–ª—ã –≤ —Ñ–æ—Ä–º–∞—Ç 'BTCUSDT', —É–¥–∞–ª—è—è —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏."""
    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Å–∏–º–≤–æ–ª –≤—Å–µ–≥–¥–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ 'USDT'
    if symbol[-4:].upper() == 'USDT':
        # –£–¥–∞–ª—è–µ–º –ª—é–±—ã–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ (/, _) –∏ –ø—Ä–∏–≤–æ–¥–∏–º –∫ –≤–µ—Ä—Ö–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
        normalized_symbol = symbol.replace('/', '').replace('_', '').upper()
        return normalized_symbol
    else:
        raise ValueError(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å–∏–º–≤–æ–ª: {symbol}. –°–∏–º–≤–æ–ª –¥–æ–ª–∂–µ–Ω –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å—Å—è –Ω–∞ 'USDT'.")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å–ª–æ–≤–∏–π –∏ —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–∏–±—ã–ª–∏
def check_and_calculate_opportunities(data, min_spread, max_spread, min_trade_amount, min_volume, require_withdraw=True, require_deposit=True):
    logging.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –∞—Ä–±–∏—Ç—Ä–∞–∂–∞.")
    opportunities = []

    for exchange1, coins1 in data.items():
        logging.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–Ω–µ—Ç –Ω–∞ {exchange1}")
        for symbol1, details1 in coins1.items():
            try:
                normalized_symbol1 = normalize_symbol_for_comparison(symbol1)
            except ValueError as e:
                logging.warning(f"–û—à–∏–±–∫–∞ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏–º–≤–æ–ª–∞ {symbol1} –Ω–∞ {exchange1}: {e}")
                continue

            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤—ã–≤–æ–¥–∞ –∏ –≤–≤–æ–¥–∞
            if (not require_withdraw or details1['withdraw_possible']) and (not require_deposit or details1['deposit_possible']):
                if details1['volume'] >= min_volume:
                    for exchange2, coins2 in data.items():
                        if exchange1 != exchange2:
                            for symbol2, details2 in coins2.items():
                                try:
                                    normalized_symbol2 = normalize_symbol_for_comparison(symbol2)
                                except ValueError as e:
                                    logging.warning(f"–û—à–∏–±–∫–∞ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏–º–≤–æ–ª–∞ {symbol2} –Ω–∞ {exchange2}: {e}")
                                    continue

                                if normalized_symbol1 == normalized_symbol2:
                                    logging.info(f"–°—Ä–∞–≤–Ω–µ–Ω–∏–µ {symbol1} –º–µ–∂–¥—É {exchange1} –∏ {exchange2}")
                                    buy_price = details1['price']
                                    sell_price = details2['price']

                                    if buy_price == 0 or sell_price == 0:
                                        logging.warning(f"–¶–µ–Ω—ã –¥–ª—è {symbol1} —Ä–∞–≤–Ω—ã –Ω—É–ª—é: buy_price={buy_price}, sell_price={sell_price}")
                                        continue

                                    spread = (sell_price - buy_price) / buy_price * 100

                                    if spread < 0:
                                        logging.info(f"–°–ø—Ä–µ–¥ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π. –ú–µ–Ω—è–µ–º –º–µ—Å—Ç–∞–º–∏ –±–∏—Ä–∂–∏ –¥–ª—è {symbol1}.")
                                        buy_price, sell_price = sell_price, buy_price
                                        exchange1, exchange2 = exchange2, exchange1
                                        spread = (sell_price - buy_price) / buy_price * 100

                                    logging.info(f"–°–ø—Ä–µ–¥ –¥–ª—è {symbol1} –º–µ–∂–¥—É {exchange1} –∏ {exchange2}: {spread:.2f}%")

                                    if min_spread <= spread <= max_spread:
                                        # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ç—å –∏ –∫–æ–º–∏—Å—Å–∏–∏
                                        network1, buy_fee = get_best_network(details1['withdraw_fees'])
                                        network2, sell_fee = get_best_network(details2['withdraw_fees'])

                                        if network1 is None or network2 is None:
                                            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â—É—é —Å–µ—Ç—å –¥–ª—è {symbol1} –º–µ–∂–¥—É {exchange1} –∏ {exchange2}, –ø—Ä–æ–ø—É—Å–∫.")
                                            continue

                                        opportunity = {
                                            'symbol': symbol1,
                                            'buy_exchange': exchange1,
                                            'sell_exchange': exchange2,
                                            'buy_price': buy_price,
                                            'sell_price': sell_price,
                                            'spread': spread,
                                            'spread_display': spread,
                                            'withdraw_possible': details1['withdraw_possible'],
                                            'deposit_possible': details2['deposit_possible'],
                                            'network': network1,  # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ç–∏
                                            'withdraw_fee': buy_fee + sell_fee,  # –£–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â—É—é –∫–æ–º–∏—Å—Å–∏—é
                                            'time_found': time.strftime('%Y-%m-%d %H:%M:%S')
                                        }
                                        logging.info(f"–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ –Ω–∞–π–¥–µ–Ω–∞: {opportunity}")
                                        opportunities.append(opportunity)
                                    else:
                                        logging.info(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π —Å–ø—Ä–µ–¥ –¥–ª—è {symbol1} –º–µ–∂–¥—É {exchange1} –∏ {exchange2}: {spread:.2f}%")
            else:
                logging.info(f"–ü—Ä–æ–ø—É—Å–∫ {symbol1} –Ω–∞ {exchange1} –∏–∑-–∑–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≤—ã–≤–æ–¥–∞ –∏–ª–∏ –¥–µ–ø–æ–∑–∏—Ç–∞")

    logging.info(f"–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π: {len(opportunities)}")
    if opportunities:
        exchanges = set()
        for opp in opportunities:
            exchanges.add(opp['buy_exchange'])
            exchanges.add(opp['sell_exchange'])
        logging.info(f"–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ –Ω–∞–π–¥–µ–Ω—ã –Ω–∞ —Å–ª–µ–¥—É—é—â–∏—Ö –±–∏—Ä–∂–∞—Ö: {', '.join(exchanges)}")

    return opportunities




def round_price_to_min_precision(price_a, price_b):
    """–û–∫—Ä—É–≥–ª—è–µ–º price_a –¥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π price_b"""
    price_b_str = f"{price_b:.10f}".rstrip('0')  # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –Ω—É–ª–∏ —Å–ø—Ä–∞–≤–∞
    decimal_places = len(price_b_str.split('.')[1]) if '.' in price_b_str else 0

    # –û–∫—Ä—É–≥–ª—è–µ–º price_a –¥–æ —ç—Ç–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–Ω–∞–∫–æ–≤
    return round(price_a, decimal_places)


# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–ø—Ä–µ–¥–∞
async def update_spread(opportunities, spread_threshold):
    logging.info("–ê–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏—è –∑–Ω–∞—á–µ–Ω–∏–π —Å–ø—Ä–µ–¥–∞.")
    updated_opportunities = []

    tasks = []
    for opp in opportunities:
        tasks.append(asyncio.create_task(update_single_spread(opp, spread_threshold, MIN_SPREAD)))

    updated_opportunities = await asyncio.gather(*tasks)

    removed_signals = len(opportunities) - len([opp for opp in updated_opportunities if opp])
    logging.info(f"–°–∏–≥–Ω–∞–ª–æ–≤, –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø—Ä–µ–¥–∞: {removed_signals}")

    return [opp for opp in updated_opportunities if opp]


async def update_single_spread(opp, spread_threshold, minimal_spread):
    symbol = opp['symbol']
    buy_exchange = opp['buy_exchange']
    sell_exchange = opp['sell_exchange']
    original_spread = opp['spread']

    new_buy_price = await get_price_from_exchange(buy_exchange, symbol)
    new_sell_price = await get_price_from_exchange(sell_exchange, symbol)

    if new_buy_price is None or new_sell_price is None:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ü–µ–Ω—ã –¥–ª—è {symbol} –Ω–∞ {buy_exchange} –∏–ª–∏ {sell_exchange}.")
        return None

    # –û–∫—Ä—É–≥–ª—è–µ–º –Ω–æ–≤—ã–µ —Ü–µ–Ω—ã –ø–µ—Ä–µ–¥ —Ä–∞—Å—á–µ—Ç–æ–º —Å–ø—Ä–µ–¥–∞
    rounded_new_buy_price = round_price_to_min_precision(new_buy_price, new_sell_price)
    rounded_new_sell_price = round_price_to_min_precision(new_sell_price, new_buy_price)

    new_spread = ((rounded_new_sell_price - rounded_new_buy_price) / rounded_new_buy_price) * 100
    minimal_allowed_spread = original_spread - spread_threshold

    logging.info(
        f"–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Å–ø—Ä–µ–¥ –¥–ª—è {symbol} ({buy_exchange} -> {sell_exchange}) –±—ã–ª {original_spread:.8f}%. "
        f"–¶–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏: {opp['buy_price']:.8f}, –¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏: {opp['sell_price']:.8f}. "
        f"–ü–æ—Ä–æ–≥–æ–≤—ã–π —Å–ø—Ä–µ–¥: {minimal_allowed_spread:.8f}%. –í—Ä–µ–º—è: {opp['time_found']}."
    )
    logging.info(
        f"–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø—Ä–µ–¥ –¥–ª—è {symbol} —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç {new_spread:.8f}%. "
        f"–ù–æ–≤–∞—è —Ü–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏: {rounded_new_buy_price:.8f}, –ù–æ–≤–∞—è —Ü–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏: {rounded_new_sell_price:.8f}. "
        f"–í—Ä–µ–º—è: {time.strftime('%Y-%m-%d %H:%M:%S')}."
    )

    if new_spread < minimal_spread:
        logging.info(
            f"–°–ø—Ä–µ–¥ –¥–ª—è {symbol} —É–º–µ–Ω—å—à–∏–ª—Å—è –Ω–∏–∂–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è {minimal_spread:.8f}%. –≠—Ç–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –Ω–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ Telegram.")
        return None
    elif new_spread < minimal_allowed_spread:
        logging.info(
            f"–°–ø—Ä–µ–¥ –¥–ª—è {symbol} —É–º–µ–Ω—å—à–∏–ª—Å—è –Ω–∏–∂–µ –ø–æ—Ä–æ–≥–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è {minimal_allowed_spread:.8f}%, –Ω–æ –æ—Å—Ç–∞—ë—Ç—Å—è –≤—ã—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è {minimal_spread:.8f}%. –≠—Ç–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ Telegram.")
        opp['spread'] = new_spread
        opp['buy_price'] = rounded_new_buy_price
        opp['sell_price'] = rounded_new_sell_price
        return opp
    else:
        logging.info(
            f"–°–ø—Ä–µ–¥ –¥–ª—è {symbol} —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–æ—Ä–æ–≥–æ–≤–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é {minimal_allowed_spread:.8f}%. –≠—Ç–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ Telegram.")
        opp['spread'] = new_spread
        opp['buy_price'] = rounded_new_buy_price
        opp['sell_price'] = rounded_new_sell_price
        return opp


async def get_price_from_exchange(exchange, symbol):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –±–∏—Ä–∂–∏"""
    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å–∏–º–≤–æ–ª –ø–µ—Ä–µ–¥ –ø–æ–ª—É—á–µ–Ω–∏–µ–º —Ü–µ–Ω—ã
    symbol = normalize_symbol(exchange, symbol)

    if exchange == "binance":
        return await get_binance_price(symbol)
    elif exchange == "bybit":
        return await get_bybit_price(symbol)
    elif exchange == "mexc":
        return await get_mexc_price(symbol)
    elif exchange == "kucoin":
        return await get_kucoin_price(symbol)
    elif exchange == "htx":
        return await get_htx_price(symbol)
    else:
        logging.warning(f"–ë–∏—Ä–∂–∞ {exchange} –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞ –¥–ª—è {symbol}.")
        return None


async def fetch_with_timeout(url, params=None, timeout=10):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å —Ç–∞–π–º-–∞—É—Ç–æ–º"""
    try:
        response = await fetch_data(url, {'params': params, 'timeout': timeout})
        response.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
        return response.json()
    except requests.exceptions.RequestException as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ {url} —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ {params}: {e}")
        return None


async def get_binance_price(symbol):
    try:
        url = "https://api.binance.com/api/v3/ticker/24hr"
        data = await fetch_data(url)

        for item in data:
            if item['symbol'] == symbol:
                return float(item['lastPrice'])
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã —Å Binance –¥–ª—è {symbol}: {e}")
    return None


async def get_bybit_price(symbol):
    try:
        url = "https://api.bybit.com/v5/market/tickers"
        params = {'category': 'spot'}
        data = await fetch_data(url, params)

        for item in data['result']['list']:
            if item['symbol'] == symbol:
                return float(item['lastPrice'])
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã —Å Bybit –¥–ª—è {symbol}: {e}")
    return None


async def get_mexc_price(symbol):
    try:
        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏–º–≤–æ–ª–∞ –¥–ª—è MEXC –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –±–µ–∑ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–π –∏ –¥–µ—Ñ–∏—Å–æ–≤
        normalized_symbol = symbol.replace('_', '').replace('/', '').upper()
        url = f"https://api.mexc.com/api/v3/ticker/price?symbol={normalized_symbol}"
        data = await fetch_data(url)

        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∏ –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ —Ü–µ–Ω—ã MEXC
        if 'price' in data:
            current_price = float(data['price'])
            price_str = str(current_price)
            if price_str[-1] != '0':
                decimal_part = price_str.split('.')[1]
                num_digits = len(decimal_part)
                minus_price = 1 / (10 ** num_digits)
                current_price = round(current_price - minus_price, num_digits)
            return current_price

        logging.warning(f"–°–∏–º–≤–æ–ª {normalized_symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–∞–Ω–Ω—ã—Ö MEXC: {data}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã —Å MEXC –¥–ª—è {symbol}: {e}")
    return None


async def get_kucoin_price(symbol):
    try:
        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏–º–≤–æ–ª–∞ –¥–ª—è KuCoin —Å –¥–µ—Ñ–∏—Å–æ–º
        normalized_symbol = symbol.replace('/USDT', '-USDT').upper()
        url = f"https://api.kucoin.com/api/v1/market/stats?symbol={normalized_symbol}"
        data = await fetch_data(url)

        if 'data' in data and 'last' in data['data']:
            return float(data['data']['last'])  # –ò—Å–ø–æ–ª—å–∑—É–µ–º 'last' –∫–∞–∫ –ø–æ—Å–ª–µ–¥–Ω—é—é —Ü–µ–Ω—É
        logging.warning(f"–°–∏–º–≤–æ–ª {normalized_symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–∞–Ω–Ω—ã—Ö KuCoin: {data}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã —Å KuCoin –¥–ª—è {symbol}: {e}")
    return None


async def get_htx_price(symbol):
    try:
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å–∏–º–≤–æ–ª –¥–ª—è HTX (Huobi) –≤ –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä –∏ –±–µ–∑ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π
        normalized_symbol = symbol.replace('/', '').lower()
        url = f"https://api.huobi.pro/market/detail/merged?symbol={normalized_symbol}"
        data = await fetch_data(url)

        if 'tick' in data and 'close' in data['tick']:
            return float(data['tick']['close'])
        logging.warning(f"–°–∏–º–≤–æ–ª {normalized_symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–∞–Ω–Ω—ã—Ö HTX: {data}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã —Å HTX –¥–ª—è {symbol}: {e}")
    return None


def get_best_network(withdraw_fees):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–µ—Ç–∏ —Å –Ω–∞–∏–º–µ–Ω—å—à–µ–π –∫–æ–º–∏—Å—Å–∏–µ–π –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –≤—ã–≤–æ–¥–∞"""
    if not withdraw_fees:
        return None, float('inf')

    valid_fees = []
    for fee in withdraw_fees:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç–ª–µ–º–µ–Ω—Ç —Å–ª–æ–≤–∞—Ä–µ–º
        if isinstance(fee, dict) and fee.get('withdraw_enabled') and fee.get('fee') != 'N/A':
            try:
                fee_value = float(fee['fee'])
                valid_fees.append((fee.get('chainType', fee.get('chain', 'N/A')), fee_value))
            except ValueError:
                continue

    if not valid_fees:
        return None, float('inf')

    best_fee = min(valid_fees, key=lambda x: x[1])
    return best_fee



async def check_opportunity_liquidity(opp):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ –¥–ª—è –æ–¥–Ω–æ–π –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏"""
    await connect_selected_websockets(opp['symbol'], opp['buy_exchange'], opp['sell_exchange'])
    has_liquidity, dynamic_trade_amount = await check_liquidity_custom(
        opp['buy_exchange'], opp['sell_exchange'], opp['symbol'], PRICE_RANGE_PERCENT
    )
    if has_liquidity:
        opp['dynamic_trade_amount'] = dynamic_trade_amount
        return opp
    return None


# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    logging.info("–ó–∞–ø—É—Å–∫ –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–≥–æ –±–æ—Ç–∞.")

    while True:
        data = await get_data_from_servers()
        opportunities = check_and_calculate_opportunities(data, MIN_SPREAD, MAX_SPREAD, MIN_TRADE_AMOUNT,
                                                          MIN_VOLUME)

        if opportunities:
            logging.info(f"–ù–∞–π–¥–µ–Ω–æ {len(opportunities)} –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏...")

            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –±–ª–æ–∫–∏ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ `TASK_BATCH_SIZE`
            for i in range(0, len(opportunities), TASK_BATCH_SIZE):
                batch = opportunities[i:i + TASK_BATCH_SIZE]

                # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–¥–∞—á –≤ —Ç–µ–∫—É—â–µ–º –±–ª–æ–∫–µ
                await asyncio.gather(*[process_opportunity(opp) for opp in batch])

                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –±–ª–æ–∫–æ–≤ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –Ω–∞–≥—Ä—É–∑–∫–∏
                await asyncio.sleep(1)

        logging.info("–û–∂–∏–¥–∞–Ω–∏–µ 2 –º–∏–Ω—É—Ç—ã –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π.")
        await asyncio.sleep(120)


if __name__ == '__main__':
    asyncio.run(main())